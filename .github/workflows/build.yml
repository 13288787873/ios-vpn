name: Build iOS App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Select Xcode
      run: sudo xcode-select -switch /Applications/Xcode.app
      
    - name: Build
      run: |
        cd DomainBlocker
        mkdir -p build
        
        # 构建项目
        xcodebuild clean archive \
          -project DomainBlocker.xcodeproj \
          -scheme DomainBlocker \
          -configuration Release \
          -sdk iphoneos \
          -archivePath $PWD/build/DomainBlocker.xcarchive \
          PRODUCT_BUNDLE_IDENTIFIER="com.HengTai.Meng" \
          CODE_SIGN_STYLE=Manual \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          PROVISIONING_PROFILE_SPECIFIER="" \
          SKIP_INSTALL=NO \
          BUILD_LIBRARIES_FOR_DISTRIBUTION=YES \
          ENABLE_BITCODE=NO \
          COPY_PHASE_STRIP=NO \
          STRIP_INSTALLED_PRODUCT=NO \
          STRIP_SWIFT_SYMBOLS=NO \
          DEBUG_INFORMATION_FORMAT="dwarf-with-dsym"
          
        # 准备 IPA 文件结构
        cd build
        rm -rf Payload
        mkdir -p Payload
        
        # 复制应用和所有资源
        cp -R DomainBlocker.xcarchive/Products/Applications/DomainBlocker.app Payload/
        
        # 创建必要的目录和文件
        mkdir -p Payload/DomainBlocker.app/_CodeSignature
        mkdir -p Payload/DomainBlocker.app/Frameworks
        mkdir -p Payload/DomainBlocker.app/PlugIns
        mkdir -p Payload/DomainBlocker.app/Watch
        
        # 复制 Swift 运行时库
        SWIFT_LIBS_PATH="/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/iphoneos"
        for lib in libswift_Concurrency.dylib libswift_Foundation.dylib libswift_os.dylib libswift_CoreFoundation.dylib libswift_Darwin.dylib; do
          if [ -f "$SWIFT_LIBS_PATH/$lib" ]; then
            cp "$SWIFT_LIBS_PATH/$lib" Payload/DomainBlocker.app/Frameworks/
          fi
        done
        
        # 复制 NetworkExtension 相关框架
        mkdir -p Payload/DomainBlocker.app/Frameworks/NetworkExtension.framework
        if [ -d "/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/System/Library/Frameworks/NetworkExtension.framework" ]; then
          cp -R "/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/System/Library/Frameworks/NetworkExtension.framework/" Payload/DomainBlocker.app/Frameworks/NetworkExtension.framework/
        fi
        
        # 创建空的 CodeResources 文件
        touch Payload/DomainBlocker.app/_CodeSignature/CodeResources
        
        # 确保文件权限正确
        chmod -R 755 Payload
        find Payload -type f -name "*.dylib" -exec chmod 644 {} \;
        find Payload -type f -name "*.framework" -exec chmod 644 {} \;
        
        # 显示文件结构
        echo "App bundle contents:"
        ls -la Payload/DomainBlocker.app/
        echo "Frameworks:"
        ls -la Payload/DomainBlocker.app/Frameworks/
        
        # 创建 IPA
        rm -f DomainBlocker.ipa
        zip -qry DomainBlocker.ipa Payload
        
        # 验证 IPA 结构
        echo "IPA contents:"
        unzip -l DomainBlocker.ipa
      
    - name: Upload IPA
      uses: actions/upload-artifact@v4
      with:
        name: app
        path: DomainBlocker/build/DomainBlocker.ipa 